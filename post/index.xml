<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小侃流年的博客</title>
    <link>https://forduke.github.io/post/</link>
    <description>Recent content in Posts on 小侃流年的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 26 Nov 2019 17:47:09 +0800</lastBuildDate>
    
	<atom:link href="https://forduke.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 对象基本用法</title>
      <link>https://forduke.github.io/post/js-object/</link>
      <pubDate>Tue, 26 Nov 2019 17:47:09 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/js-object/</guid>
      <description>一、声明对象的两种语法 let obj1 = { &#39;name&#39;: &#39;zhang&#39;, &#39;age&#39;: 24 } // 或 let obj2 = new Object({ &#39;name&#39;: &#39;zhang&#39;, &#39;age&#39;: 24, &#39;gf&#39;: undefined }) 二、如何删除对象的key(属性),value(值) delete obj1.name // 或 delete obj1[&#39;name&#39;] 即可删除o</description>
    </item>
    
    <item>
      <title>Js Grammar</title>
      <link>https://forduke.github.io/post/js-grammar/</link>
      <pubDate>Tue, 19 Nov 2019 23:41:17 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/js-grammar/</guid>
      <description>一、关于表达式和语句 语句 为了完成某种任务而进行的操作。例：let a = 1 + 2; 表达式 为了得到返回值的计算式。例：1 + 2 语句和表达式的区别在于，前</description>
    </item>
    
    <item>
      <title>JS 概览</title>
      <link>https://forduke.github.io/post/js-start/</link>
      <pubDate>Thu, 07 Nov 2019 13:37:51 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/js-start/</guid>
      <description>学习到JS了，工作这一年也没怎么好好认真看过红宝书或JS基础之类的。这次会认真学习。亡羊补牢为时不晚 一、JavaScript 的历史 1995年</description>
    </item>
    
    <item>
      <title>HTTP 相关</title>
      <link>https://forduke.github.io/post/http-url/</link>
      <pubDate>Tue, 05 Nov 2019 14:37:36 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/http-url/</guid>
      <description>HTTP (HyperText Transfer Protoco) 超文本传输协议（HTTP）是一个用于传输超媒体文档（例如 HTML）的应用层协议。 URL 概览 以百度搜索 hello 为例 https://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=1#5 协议+域名或 IP+端口号+路</description>
    </item>
    
    <item>
      <title>浏览器渲染 和 css animation</title>
      <link>https://forduke.github.io/post/css-animation/</link>
      <pubDate>Mon, 04 Nov 2019 17:16:49 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/css-animation/</guid>
      <description>一、浏览器渲染原理个人理解 CSSOM 树和 DOM 树合并成渲染树，然后用于计算每个可见元素的布局，并输出给绘制流程，将像素渲染到屏幕上。 DOM 树与 CSSOM 树合并后形成</description>
    </item>
    
    <item>
      <title>HTML重点标签</title>
      <link>https://forduke.github.io/post/html-label-important/</link>
      <pubDate>Thu, 24 Oct 2019 10:17:03 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/html-label-important/</guid>
      <description>1. a 标签的用法？ href 要打开的链接，为空的话会刷新页面，&amp;rdquo;#&amp;ldquo;不刷新、但会滚动到顶部 网址： https://google.com http://google.com //google.com (无协议网址) 路径 /a/b/c ( 绝</description>
    </item>
    
    <item>
      <title>HTML入门笔记</title>
      <link>https://forduke.github.io/post/html-introduce/</link>
      <pubDate>Tue, 22 Oct 2019 18:32:05 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/html-introduce/</guid>
      <description>HTML 是？ 上个世纪 90 年代由欧洲核子研究中心的物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明，叫李爵士就行。 HTML 起手？ ! + tab 或 回车 常用</description>
    </item>
    
    <item>
      <title>Hugo搭建博客和Github预览</title>
      <link>https://forduke.github.io/post/hugo/</link>
      <pubDate>Tue, 22 Oct 2019 15:45:41 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/hugo/</guid>
      <description>一、使用 Hugo 快速搭建博客 Hugo 官网 根据 Quick Start 操作，过程就不赘述了 先下载 Hugo，我没有使用命令行操作，直接下载的程序 hugo 程序 然后在系统环境变量里添加地</description>
    </item>
    
    <item>
      <title>First Blog</title>
      <link>https://forduke.github.io/post/first-blog/</link>
      <pubDate>Tue, 22 Oct 2019 13:45:41 +0800</pubDate>
      
      <guid>https://forduke.github.io/post/first-blog/</guid>
      <description>开博大吉 坚持就是胜利！</description>
    </item>
    
  </channel>
</rss>